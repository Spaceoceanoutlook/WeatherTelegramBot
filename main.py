import os
from datetime import datetime
from zoneinfo import ZoneInfo

import requests
import telebot
from telebot import types
from dotenv import load_dotenv


load_dotenv()

TOKEN = os.getenv("TOKEN", '')
API_KEY = os.getenv("OPENWEATHER_API_KEY")
CITY = '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'
UNITS = 'metric'
LANG = 'ru'

bot = telebot.TeleBot(TOKEN)

bot.set_my_commands([
    types.BotCommand("weather", "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"),
])

def fetch_weather(endpoint: str, params: dict):
    url = f"http://api.openweathermap.org/data/2.5/{endpoint}"
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {endpoint}: {e}")
        return None

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message,
        "<b>–ú–µ–Ω—é</b> ‚û°Ô∏è –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", parse_mode="HTML")

@bot.message_handler(commands=['weather'])
def get_weather(message):
    params = {
        'q': CITY,
        'appid': API_KEY,
        'units': UNITS,
        'lang': LANG
    }

    current_data = fetch_weather("weather", params)
    forecast_data = fetch_weather("forecast", params)

    if not current_data or not forecast_data:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ")
        return

    try:
        temp = round(current_data["main"]["temp"])
        description = current_data["weather"][0]["description"].capitalize()
        humidity = current_data["main"]["humidity"]

        tz = ZoneInfo("Asia/Yekaterinburg")
        sunrise = datetime.fromtimestamp(current_data["sys"]["sunrise"], tz=tz).strftime('%H:%M')
        sunset = datetime.fromtimestamp(current_data["sys"]["sunset"], tz=tz).strftime('%H:%M')

        forecast_list = forecast_data.get("list", [])[:12]
        forecast_lines = [
            f"{datetime.fromtimestamp(item['dt'], tz=tz).strftime('%H:%M')}: "
            f"{round(item['main']['temp'])}¬∞C, {item['weather'][0]['description']}"
            for item in forecast_list
        ]

        weather_message = (
            f"üèôÔ∏è –ü–æ–≥–æ–¥–∞ –≤ {CITY}e\n\n"
            f"üå°Ô∏è –°–µ–π—á–∞—Å: {temp}¬∞C\n"
            f"‚òÅÔ∏è {description}\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üåÖ –í–æ—Å—Ö–æ–¥: {sunrise} | üåá –ó–∞–∫–∞—Ç: {sunset}\n\n"
            f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 36 —á–∞—Å–æ–≤:\n" + "\n".join(forecast_lines)
        )

        bot.reply_to(message, weather_message)

    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == '__main__':
    print("ü§ñ –ë–æ—Ç –ø–æ–≥–æ–¥—ã –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞ –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
